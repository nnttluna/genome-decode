# -*- coding: utf-8 -*-
"""genome-on-ref.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SpecC3fEcbQWgZzdWWT08qt8zxtpGXeL
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import re
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
ref = pd.read_csv('/content/drive/MyDrive/Portfolio/genome/600 notable genotypes SNPedia.csv')
print(ref.head())

genome = pd.read_csv('/content/drive/MyDrive/Portfolio/genome/genome_zeeshan_usmani.csv')
print(genome.head())

!pip install openpyxl

!pip install ydata-profiling

from ydata_profiling import ProfileReport

ref.info()

pd.isnull(ref).sum()

ref['Summary'].replace('', np.nan, inplace=True)
reference_df = ref.dropna(subset=['Summary'], inplace = False)
print (reference_df)

reference_df.head()

#renaming 1st column as 'rsid'
reference_df.rename(columns={'Unnamed: 0':'rsid'}, inplace=True)
reference_df.head()

reference_df["genotype"] = reference_df["rsid"].str.extract('.*\((.*)\).*') #to make new column "genotype"
reference_df["genotype"] = reference_df["genotype"].str.replace(";","") #exclude ; from values of 'genotype'
reference_df["rsid"] = reference_df['rsid'].str.replace("\((.*?)\)","", regex=True) #removing extra values from column 'rsid'
reference_df["rsid"] = reference_df["rsid"].str.lower()
reference_df["genotype"] = reference_df["genotype"].str.upper()
reference_df.head()

genome.head()

#filtering those snips of genome which have some info in reference dataframe and saving them in another dataframe
genome.rename(columns={'# rsid':'rsid'}, inplace=True)
snps_with_info=pd.merge(reference_df,genome, on="rsid", how="left")
snps_with_info.info()
snps_with_info.head()

snps_with_info=snps_with_info.drop_duplicates()
snps_with_info.info()
snps_with_info.head()

#snps_with_info.drop(["genotype_y","position"],inplace=True,axis=1)#dropping unnecessary columns
snps_with_info.duplicated()

report = ProfileReport(genome)
report

genome["genotype"].value_counts() #checking no of different genotypes

#Some other interesting traits to be worth reading
significant_info = snps_with_info[snps_with_info["Magnitude"] >= 2.0]
significant_info

#snps showing positive aspects about this person
significant_info.loc[snps_with_info["Repute"] == "Good"]

significant_info[significant_info["Summary"].str.contains("cancer") ] #cancer risk

#checking for suspectibility to different diseases
significant_info[significant_info["Summary"].str.contains("risk") ]

significant_info[significant_info["Summary"].str.contains("Alzheimer") ]

